{"ast":null,"code":"// Define a CartReducer function that handles the state changes for the cart\nconst CartReducer = (state, action) => {\n  // Use a switch statement to handle different types of actions\n  switch (action.type) {\n    // If the action type is ADD_TO_CART, add the payload to the cart array with a quantity of 1\n    case 'ADD_TO_CART':\n      return {\n        ...state,\n        cart: [...state.cart, {\n          ...action.payload,\n          qty: 1\n        }]\n      };\n    // If the action type is REMOVE_FROM_CART, remove the item with the matching id from the cart array\n    case 'REMOVE_FROM_CART':\n      return {\n        ...state,\n        cart: state.cart.filter(c => c.id !== action.payload)\n      };\n    // If the action type is INCREMENT_CART_QTY, increment the quantity of the item with the matching id in the cart array by the payload value\n    case 'INCREMENT_CART_QTY':\n      return {\n        ...state,\n        cart: state.cart.map(c => c.id === action.payload.id ? {\n          ...c,\n          qty: c.qty + action.payload.val\n        } : c)\n      };\n    // If the action type is DECREMENT_CART_QTY, decrement the quantity of the item with the matching id in the cart array by the payload value\n    case 'DECREMENT_CART_QTY':\n      return {\n        ...state,\n        cart: state.cart.map(c => c.id === action.payload.id ? {\n          ...c,\n          qty: c.qty - action.payload.val\n        } : c)\n      };\n\n    // If the action type is SEARCH_PRODUCT, filter the products array to only include items with a title that includes the payload string\n    case 'SEARCH_PRODUCT':\n      return {\n        ...state,\n        products: state.products.filter(c => c.title.toLowerCase().includes(action.payload))\n      };\n    // If the action type is not recognized, return the current state\n    default:\n      return state;\n  }\n};\n_c = CartReducer;\nexport default CartReducer;\nvar _c;\n$RefreshReg$(_c, \"CartReducer\");","map":{"version":3,"names":["CartReducer","state","action","type","cart","payload","qty","filter","c","id","map","val","products","title","toLowerCase","includes"],"sources":["C:/Users/DELL/Desktop/Azubi shop/meshack work/Azubi-ecommerce/src/context/CartReducer.js"],"sourcesContent":["// Define a CartReducer function that handles the state changes for the cart\r\nconst CartReducer = (state, action) => {\r\n  // Use a switch statement to handle different types of actions\r\n  switch (action.type) {\r\n    // If the action type is ADD_TO_CART, add the payload to the cart array with a quantity of 1\r\n    case 'ADD_TO_CART':\r\n      return {\r\n        ...state,\r\n        cart: [...state.cart, { ...action.payload, qty: 1 }],\r\n      };\r\n   // If the action type is REMOVE_FROM_CART, remove the item with the matching id from the cart array\r\n    case 'REMOVE_FROM_CART':\r\n      return {\r\n        ...state,\r\n        cart: state.cart.filter(c => c.id !== action.payload),\r\n      };\r\n    // If the action type is INCREMENT_CART_QTY, increment the quantity of the item with the matching id in the cart array by the payload value\r\n    case 'INCREMENT_CART_QTY':\r\n      return {\r\n        ...state,\r\n        cart: state.cart.map(c =>\r\n          c.id === action.payload.id ? { ...c, qty: c.qty + action.payload.val } : c\r\n        ),\r\n      };\r\n    // If the action type is DECREMENT_CART_QTY, decrement the quantity of the item with the matching id in the cart array by the payload value\r\n    case 'DECREMENT_CART_QTY':\r\n      return {\r\n        ...state,\r\n        cart: state.cart.map(c =>\r\n          c.id === action.payload.id ? { ...c, qty: c.qty - action.payload.val } : c\r\n        ),\r\n      };\r\n    \r\n    // If the action type is SEARCH_PRODUCT, filter the products array to only include items with a title that includes the payload string\r\n    case 'SEARCH_PRODUCT':\r\n      return {\r\n        ...state,\r\n        products: state.products.filter(c =>\r\n          c.title.toLowerCase().includes(action.payload)\r\n        ),\r\n      };\r\n    // If the action type is not recognized, return the current state\r\n    default:\r\n      return state;\r\n  }\r\n};\r\nexport default CartReducer;"],"mappings":"AAAA;AACA,MAAMA,WAAW,GAAG,CAACC,KAAK,EAAEC,MAAM,KAAK;EACrC;EACA,QAAQA,MAAM,CAACC,IAAI;IACjB;IACA,KAAK,aAAa;MAChB,OAAO;QACL,GAAGF,KAAK;QACRG,IAAI,EAAE,CAAC,GAAGH,KAAK,CAACG,IAAI,EAAE;UAAE,GAAGF,MAAM,CAACG,OAAO;UAAEC,GAAG,EAAE;QAAE,CAAC;MACrD,CAAC;IACJ;IACC,KAAK,kBAAkB;MACrB,OAAO;QACL,GAAGL,KAAK;QACRG,IAAI,EAAEH,KAAK,CAACG,IAAI,CAACG,MAAM,CAACC,CAAC,IAAIA,CAAC,CAACC,EAAE,KAAKP,MAAM,CAACG,OAAO;MACtD,CAAC;IACH;IACA,KAAK,oBAAoB;MACvB,OAAO;QACL,GAAGJ,KAAK;QACRG,IAAI,EAAEH,KAAK,CAACG,IAAI,CAACM,GAAG,CAACF,CAAC,IACpBA,CAAC,CAACC,EAAE,KAAKP,MAAM,CAACG,OAAO,CAACI,EAAE,GAAG;UAAE,GAAGD,CAAC;UAAEF,GAAG,EAAEE,CAAC,CAACF,GAAG,GAAGJ,MAAM,CAACG,OAAO,CAACM;QAAI,CAAC,GAAGH,CAAC;MAE9E,CAAC;IACH;IACA,KAAK,oBAAoB;MACvB,OAAO;QACL,GAAGP,KAAK;QACRG,IAAI,EAAEH,KAAK,CAACG,IAAI,CAACM,GAAG,CAACF,CAAC,IACpBA,CAAC,CAACC,EAAE,KAAKP,MAAM,CAACG,OAAO,CAACI,EAAE,GAAG;UAAE,GAAGD,CAAC;UAAEF,GAAG,EAAEE,CAAC,CAACF,GAAG,GAAGJ,MAAM,CAACG,OAAO,CAACM;QAAI,CAAC,GAAGH,CAAC;MAE9E,CAAC;;IAEH;IACA,KAAK,gBAAgB;MACnB,OAAO;QACL,GAAGP,KAAK;QACRW,QAAQ,EAAEX,KAAK,CAACW,QAAQ,CAACL,MAAM,CAACC,CAAC,IAC/BA,CAAC,CAACK,KAAK,CAACC,WAAW,EAAE,CAACC,QAAQ,CAACb,MAAM,CAACG,OAAO,CAAC;MAElD,CAAC;IACH;IACA;MACE,OAAOJ,KAAK;EAAC;AAEnB,CAAC;AAAC,KA5CID,WAAW;AA6CjB,eAAeA,WAAW;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}