{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\DELL\\\\Desktop\\\\Azubi shop\\\\meshack work\\\\Azubi-ecommerce\\\\src\\\\pages\\\\ProductInfo.jsx\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { useParams } from 'react-router-dom'; // Import the 'useParams' hook from the 'react-router-dom' module\nimport { CartState } from '../context/CartContext'; // Import the 'CartState' context from the './CartContext' module\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction ProductInfo() {\n  _s();\n  // Define the 'ProductInfo' component\n  const {\n    id\n  } = useParams(); // Extract the 'id' parameter from the route using the 'useParams' hook\n  const {\n    state: {\n      products,\n      cart\n    },\n    dispatch\n  } = CartState(); // Retrieve the 'products' and 'cart' state variables from the 'CartState' context using destructuring assignment\n\n  const product = products.find(item => item.id === id); // Find the product with the given 'id' in the 'products' array\n  const cartItem = cart === null || cart === void 0 ? void 0 : cart.some(i => i.id === `${product.id}`); // Check if the product is already in the cart\n\n  console.log(cart); // Log the current contents of the cart\n  console.log(product.id); // Log the ID of the current product\n\n  const handleAddCart = () => {\n    // Define the 'handleAddCart' function to add the current product to the cart\n    dispatch({\n      type: 'ADD_TO_CART',\n      payload: product\n    });\n  };\n  const handleRemoveCart = () => {\n    // Define the 'handleRemoveCart' function to remove the current product from the cart\n    dispatch({\n      type: 'REMOVE_FROM_CART',\n      payload: product.id\n    });\n  };\n  return (\n    /*#__PURE__*/\n    // Render the product details on the page\n    _jsxDEV(\"div\", {\n      className: \"product-container\",\n      children: [product &&\n      /*#__PURE__*/\n      // Check if the product exists before rendering\n      _jsxDEV(\"div\", {\n        className: \"product-image\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: product.imgUrl.slice(1),\n          alt: product.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 11\n        }, this), \" \", console.log(product.imgUrl.slice(0))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"product-content\",\n        children: product &&\n        /*#__PURE__*/\n        // Check if the product exists before rendering\n        _jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n            children: product.title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 42,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: product.body\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 43,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: [\"$ \", product.price]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 44,\n            columnNumber: 13\n          }, this), cart.some(p => p.id === id) ?\n          /*#__PURE__*/\n          // If the product is already in the cart, show the 'Remove from cart' button\n          _jsxDEV(\"button\", {\n            className: \"btn btn-danger\",\n            onClick: handleRemoveCart,\n            children: \"Remove from cart\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 46,\n            columnNumber: 15\n          }, this) :\n          /*#__PURE__*/\n          // If the product is not in the cart, show the 'Add to cart' button\n          _jsxDEV(\"button\", {\n            className: \"btn\",\n            onClick: handleAddCart,\n            children: \"Add to cart\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 50,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 5\n    }, this)\n  );\n}\n_s(ProductInfo, \"yQgCIz/jJfqV1l9s2yoba81MT5A=\", false, function () {\n  return [useParams];\n});\n_c = ProductInfo;\nexport default ProductInfo;\nvar _c;\n$RefreshReg$(_c, \"ProductInfo\");","map":{"version":3,"names":["React","useParams","CartState","ProductInfo","id","state","products","cart","dispatch","product","find","item","cartItem","some","i","console","log","handleAddCart","type","payload","handleRemoveCart","imgUrl","slice","title","body","price","p"],"sources":["C:/Users/DELL/Desktop/Azubi shop/meshack work/Azubi-ecommerce/src/pages/ProductInfo.jsx"],"sourcesContent":["import React from 'react';\r\n\r\nimport { useParams } from 'react-router-dom'; // Import the 'useParams' hook from the 'react-router-dom' module\r\nimport { CartState } from '../context/CartContext'; // Import the 'CartState' context from the './CartContext' module\r\n\r\nfunction ProductInfo() { // Define the 'ProductInfo' component\r\n  const { id } = useParams(); // Extract the 'id' parameter from the route using the 'useParams' hook\r\n  const { state: { products, cart }, dispatch } = CartState(); // Retrieve the 'products' and 'cart' state variables from the 'CartState' context using destructuring assignment\r\n\r\n  const product = products.find(item => item.id === id); // Find the product with the given 'id' in the 'products' array\r\n  const cartItem = cart?.some(i => i.id === `${product.id}`); // Check if the product is already in the cart\r\n\r\n  console.log(cart); // Log the current contents of the cart\r\n  console.log(product.id); // Log the ID of the current product\r\n\r\n  const handleAddCart = () => { // Define the 'handleAddCart' function to add the current product to the cart\r\n    dispatch({\r\n      type: 'ADD_TO_CART',\r\n      payload: product,\r\n    });\r\n  };\r\n\r\n  const handleRemoveCart = () => { // Define the 'handleRemoveCart' function to remove the current product from the cart\r\n    dispatch({\r\n      type: 'REMOVE_FROM_CART',\r\n      payload: product.id,\r\n    });\r\n  };\r\n\r\n  return ( // Render the product details on the page\r\n    <div className=\"product-container\">\r\n      {product && ( // Check if the product exists before rendering\r\n        <div className=\"product-image\">\r\n          <img src={(product.imgUrl).slice(1)} alt={product.title} /> {/* Include the 'alt' attribute for accessibility */}\r\n          {console.log((product.imgUrl).slice(0))}\r\n        </div>\r\n        \r\n      )}\r\n      <div className=\"product-content\">\r\n        {product && ( // Check if the product exists before rendering\r\n          <>\r\n            <h1>{product.title}</h1>\r\n            <p>{product.body}</p>\r\n            <span>$ {product.price}</span>\r\n            {cart.some(p => p.id === id) ? ( // If the product is already in the cart, show the 'Remove from cart' button\r\n              <button className=\"btn btn-danger\" onClick={handleRemoveCart}>\r\n                Remove from cart\r\n              </button>\r\n            ) : ( // If the product is not in the cart, show the 'Add to cart' button\r\n              <button className=\"btn\" onClick={handleAddCart}>\r\n                Add to cart\r\n              </button>\r\n            )}\r\n          </>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ProductInfo;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,SAASC,SAAS,QAAQ,kBAAkB,CAAC,CAAC;AAC9C,SAASC,SAAS,QAAQ,wBAAwB,CAAC,CAAC;AAAA;AAAA;AAEpD,SAASC,WAAW,GAAG;EAAA;EAAE;EACvB,MAAM;IAAEC;EAAG,CAAC,GAAGH,SAAS,EAAE,CAAC,CAAC;EAC5B,MAAM;IAAEI,KAAK,EAAE;MAAEC,QAAQ;MAAEC;IAAK,CAAC;IAAEC;EAAS,CAAC,GAAGN,SAAS,EAAE,CAAC,CAAC;;EAE7D,MAAMO,OAAO,GAAGH,QAAQ,CAACI,IAAI,CAACC,IAAI,IAAIA,IAAI,CAACP,EAAE,KAAKA,EAAE,CAAC,CAAC,CAAC;EACvD,MAAMQ,QAAQ,GAAGL,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEM,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACV,EAAE,KAAM,GAAEK,OAAO,CAACL,EAAG,EAAC,CAAC,CAAC,CAAC;;EAE5DW,OAAO,CAACC,GAAG,CAACT,IAAI,CAAC,CAAC,CAAC;EACnBQ,OAAO,CAACC,GAAG,CAACP,OAAO,CAACL,EAAE,CAAC,CAAC,CAAC;;EAEzB,MAAMa,aAAa,GAAG,MAAM;IAAE;IAC5BT,QAAQ,CAAC;MACPU,IAAI,EAAE,aAAa;MACnBC,OAAO,EAAEV;IACX,CAAC,CAAC;EACJ,CAAC;EAED,MAAMW,gBAAgB,GAAG,MAAM;IAAE;IAC/BZ,QAAQ,CAAC;MACPU,IAAI,EAAE,kBAAkB;MACxBC,OAAO,EAAEV,OAAO,CAACL;IACnB,CAAC,CAAC;EACJ,CAAC;EAED;IAAA;IAAS;IACP;MAAK,SAAS,EAAC,mBAAmB;MAAA,WAC/BK,OAAO;MAAA;MAAM;MACZ;QAAK,SAAS,EAAC,eAAe;QAAA,wBAC5B;UAAK,GAAG,EAAGA,OAAO,CAACY,MAAM,CAAEC,KAAK,CAAC,CAAC,CAAE;UAAC,GAAG,EAAEb,OAAO,CAACc;QAAM;UAAA;UAAA;UAAA;QAAA,QAAG,KAAC,EAC3DR,OAAO,CAACC,GAAG,CAAEP,OAAO,CAACY,MAAM,CAAEC,KAAK,CAAC,CAAC,CAAC,CAAC;MAAA;QAAA;QAAA;QAAA;MAAA,QAG1C,eACD;QAAK,SAAS,EAAC,iBAAiB;QAAA,UAC7Bb,OAAO;QAAA;QAAM;QACZ;UAAA,wBACE;YAAA,UAAKA,OAAO,CAACc;UAAK;YAAA;YAAA;YAAA;UAAA,QAAM,eACxB;YAAA,UAAId,OAAO,CAACe;UAAI;YAAA;YAAA;YAAA;UAAA,QAAK,eACrB;YAAA,WAAM,IAAE,EAACf,OAAO,CAACgB,KAAK;UAAA;YAAA;YAAA;YAAA;UAAA,QAAQ,EAC7BlB,IAAI,CAACM,IAAI,CAACa,CAAC,IAAIA,CAAC,CAACtB,EAAE,KAAKA,EAAE,CAAC;UAAA;UAAK;UAC/B;YAAQ,SAAS,EAAC,gBAAgB;YAAC,OAAO,EAAEgB,gBAAiB;YAAA,UAAC;UAE9D;YAAA;YAAA;YAAA;UAAA,QAAS;UAAA;UACL;UACJ;YAAQ,SAAS,EAAC,KAAK;YAAC,OAAO,EAAEH,aAAc;YAAA,UAAC;UAEhD;YAAA;YAAA;YAAA;UAAA,QACD;QAAA;MAEJ;QAAA;QAAA;QAAA;MAAA,QACG;IAAA;MAAA;MAAA;MAAA;IAAA;EACF;AAEV;AAAC,GArDQd,WAAW;EAAA,QACHF,SAAS;AAAA;AAAA,KADjBE,WAAW;AAuDpB,eAAeA,WAAW;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}